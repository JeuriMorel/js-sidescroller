import{bestLives as e,bestTime as t,updateBestLives as s,updateBestTime as i,updateStats as n}from"./best_stats.js";import{Armored_Frog as a}from"./boss.js";import{AngryEgg as r,Bee as h,Crawler as m,Ghost as o,Pumpkin as c}from"./enemies.js";import{states as l}from"./states.js";const u=0,v=1,x=2,g=3,d=4,y=5,w=0,p=1,W=2,E=3,I=4,f=5,T=6,b=7,L=8,F=9,_=10,S=11,B=[function(e){return new r(e)},function(e){return new m(e)},function(e){return new h(e)},function(e){return new o(e)},function(e){return new c(e)},function(e){return new a(e)}];class D{constructor(e){this.game=e,this.icons=this.game.UI.progressIcons}getEnemy(e){return B[e]}enemyToGetIsBee(e){return e===x}enemyToGetIsCrawler(e){return e===v}addBees(){let e=Math.floor(3*Math.random()+1);for(let t=0;t<=e;t++)this.game.enemies.push(new h(this.game))}crawlerIsInArray(){return this.game.enemies.some((e=>"Crawler"===e.enemyName))}addEnemy(){let e=this.availableEnemiesList[Math.floor(Math.random()*this.availableEnemiesList.length)];if(this.enemyToGetIsBee(e))return void this.addBees();if(this.enemyToGetIsCrawler(e)&&this.crawlerIsInArray())return void this.addEnemy();let t=this.getEnemy(e);this.game.enemies.push(t(this.game))}enter(){this.icons[this.waveIndex].isCurrentWave=!0,this.resetPlayerAttackSettings(),this.game.music.currentTheme.play()}exit(){this.icons[this.waveIndex].isCurrentWave=!1,this.icons[this.waveIndex].waveCompleted=!0,this.game.currentWave=this.game.waves[this.nextWave],this.game.currentWave.enter()}resetPlayerAttackSettings(){this.game.player.max_attack_bonus=this.waveIndex+5}}export class Wave_One extends D{constructor(e){super(e),this.availableEnemiesList=[u],this.enemiesToDefeat=10,this.maxEnemies=1,this.enemyFrequency=50,this.waveIndex=w,this.nextWave=p}}export class Wave_Two extends D{constructor(e){super(e),this.availableEnemiesList=[u,g],this.enemiesToDefeat=30,this.maxEnemies=2,this.enemyFrequency=500,this.waveIndex=p,this.nextWave=W}}export class Wave_Three extends D{constructor(e){super(e),this.availableEnemiesList=[v],this.enemiesToDefeat=15,this.maxEnemies=1,this.enemyFrequency=50,this.waveIndex=W,this.nextWave=E}addEnemy(){let e=B[v];this.game.enemies.push(e(this.game))}}export class Wave_Four extends D{constructor(e){super(e),this.availableEnemiesList=[v,u,g],this.enemiesToDefeat=45,this.maxEnemies=4,this.enemyFrequency=500,this.waveIndex=E,this.nextWave=I}}export class Wave_Five extends D{constructor(e){super(e),this.availableEnemiesList=[d],this.enemiesToDefeat=30,this.maxEnemies=1,this.enemyFrequency=50,this.waveIndex=I,this.nextWave=f}addEnemy(){let e=B[d];this.game.enemies.push(e(this.game))}}export class Wave_Six extends D{constructor(e){super(e),this.availableEnemiesList=[d,g],this.enemiesToDefeat=50,this.maxEnemies=3,this.enemyFrequency=500,this.waveIndex=f,this.nextWave=T}}export class Wave_Seven extends D{constructor(e){super(e),this.availableEnemiesList=[d,v],this.enemiesToDefeat=40,this.maxEnemies=3,this.enemyFrequency=500,this.waveIndex=T,this.nextWave=b}}export class Wave_Eight extends D{constructor(e){super(e),this.availableEnemiesList=[d,x,g],this.enemiesToDefeat=40,this.maxEnemies=4,this.enemyFrequency=500,this.waveIndex=b,this.nextWave=L}}export class Wave_Nine extends D{constructor(e){super(e),this.availableEnemiesList=[d,x,v],this.enemiesToDefeat=60,this.maxEnemies=5,this.enemyFrequency=500,this.waveIndex=L,this.nextWave=F}exit(){this.game.music.currentTheme.pause(),this.game.music.currentTheme=this.game.music.themes.boss,this.icons[this.waveIndex].isCurrentWave=!1,this.icons[this.waveIndex].waveCompleted=!0,this.game.currentWave=this.game.waves[this.nextWave],this.game.currentWave.enter()}}export class Wave_Boss extends D{constructor(e){super(e),this.availableEnemiesList=[y],this.enemiesToDefeat=0,this.maxEnemies=1,this.enemyFrequency=2500,this.waveIndex=F,this.nextWave=_}enter(){this.resetPlayerAttackSettings(),this.game.enemies.forEach((e=>e.healthPoints=0))}exit(){this.game.currentWave=this.game.waves[this.nextWave],this.game.currentWave.enter()}}export class Wave_Win extends D{constructor(e){super(e),this.availableEnemiesList=[],this.enemiesToDefeat=0,this.maxEnemies=0,this.enemyFrequency=0,this.waveIndex=_,this.nextWave=S}enter(){this.game.handleTimer(),this.game.music.currentTheme=null}exit(){this.game.currentWave=this.game.waves[this.nextWave],this.game.currentWave.enter()}}export class Wave_Results extends D{constructor(e){super(e),this.availableEnemiesList=[],this.enemiesToDefeat=0,this.maxEnemies=0,this.enemyFrequency=0,this.waveIndex=S,this.nextWave=null,this.newBestTime=!1,this.newBestLives=!1,this.setBestStats()}enter(){this.totalTime=this.game.formattedTime,this.resetPlayerAttackSettings(),this.game.player.setState(l.ENDING_RESTING),this.checkForNewBest()}exit(){}setBestStats(){this.bestTime=t,this.bestLives=e}checkForNewBest(){if(null==this.bestTime||this.game.totalTimePlaying<this.bestTime){this.newBestTime=!0;let e=this.game.totalTimePlaying;i(e),localStorage.setItem("best-time",JSON.stringify(e))}if(null==this.bestLives||this.game.UI.progressIcons.length>this.bestLives){this.newBestLives=!0;let e=this.game.UI.progressIcons.length;s(e),localStorage.setItem("best-lives",JSON.stringify(e))}n()}}