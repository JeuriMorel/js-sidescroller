import{togglePause as t,isPaused as e}from"./app.js";import{DEFAULT_CONTROLS as s}from"./constants.js";import{qs as a,qsa as o,injectControlsInHowToPlay as i}from"./utils.js";export default class l{constructor(l,r){this.lastKey="",this.game=l,this.canvas=a("canvas"),this.lastTap,this.keypressController=new AbortController,this.keysPressed={right:!1,down:!1,left:!1,up:!1,action:!1,jump:!1},this.keys=r,this.timeStampOfLastDownRelease,this.canRoll=!1,this.mobileTouches={},this.modal=a("[data-modal='controls']"),this.modalOpenBtn=a("[data-btn='controls-modal-open']"),this.modalSaveBtn=a("[data-btn='controls-modal-save']"),this.modalCancelBtn=a("[data-btn='controls-modal-cancel']"),this.modalResetDefaultBtn=a("[data-btn='controls-modal-default']"),this.controlsForm=a("[data-form='controls']"),this.controlsInputs=o("input",this.controlsForm),this.modalOpenBtn.disabled=!1,this.modalOpenBtn.addEventListener("click",(()=>{this.modal.showModal(),this.populateForm(),e||t()}),{signal:this.keypressController.signal,passive:!0}),this.controlsInputs.forEach((t=>{t.addEventListener("keydown",(e=>{e.preventDefault();let s=" "===e.key?e.code:e.key;this.controlsInputs.map((t=>t.value)).includes(s)||(t.value=s)}))})),this.controlsForm.addEventListener("submit",(({target:t})=>{const[e,s,a,o,l,r,n]=t,h={left:e.value,right:s.value,up:a.value,down:o.value,jump:l.value,action:r.value,pause:n.value};this.keys=h,localStorage.setItem("controls",JSON.stringify(h)),i(h),document.activeElement.blur()})),this.modalCancelBtn.addEventListener("click",(()=>{this.controlsForm.reset(),this.modal.close(),document.activeElement.blur()}),{signal:this.keypressController.signal,passive:!0}),this.modalResetDefaultBtn.addEventListener("click",(()=>{localStorage.removeItem("controls"),this.keys=s,this.populateForm()}),{signal:this.keypressController.signal,passive:!0}),this.canvas.addEventListener("touchstart",(()=>{let e=(new Date).getTime();e-this.lastTap<600&&(t(),this.game.music.toggleMusicPlayback()),this.lastTap=e}),{signal:this.keypressController.signal,passive:!0}),this.controllerBtns=o("[data-controls]"),this.controllerBtns?.forEach((t=>{t.addEventListener("touchstart",(s=>{if(s.cancelable&&s.preventDefault(),this.modal.open||this.game.isRecovering||e)return;let a=s.targetTouches[0].target.closest("button").dataset.controls;this.mobileTouches[a]=[a],this.setKeyPress(a,s.timeStamp,t)}),{signal:this.keypressController.signal,passive:!0}),t.addEventListener("touchmove",(t=>{if(t.cancelable&&t.preventDefault(),this.modal.open||e||this.game.isRecovering)return;let s=t.targetTouches[0].target.closest("button"),o=s.dataset.controls,i=this.mobileTouches[o],l=document.elementFromPoint(t.touches[0].pageX,t.touches[0].pageY);return l!=s&&s.hasAttribute("data-active")?(this.setKeyRelease(o,t.timeStamp,s),void this.removeKeyFromTouchesArray(i,o)):!l&&i.length?(i.forEach((e=>{let s=a(`[data-controls=${e}]`);this.setKeyRelease(e,t.timeStamp,s)})),void(i=[])):void(l?.hasAttribute("data-controls")&&!l.hasAttribute("data-active")&&(this.setKeyPress(l.dataset.controls,t.timeStamp,l),i.includes(l.dataset.controls)||i.push(l.dataset.controls)))}),{signal:this.keypressController.signal,passive:!0}),t.addEventListener("touchend",(e=>{e.cancelable&&e.preventDefault();let s=e.changedTouches[0].target.closest("button"),o=e.target.dataset.controls,i=this.mobileTouches[o];s.hasAttribute("data-active")&&(this.setKeyRelease(s.dataset.controls,e.timeStamp,t),this.removeKeyFromTouchesArray(i,s.dataset.controls)),i?.forEach((t=>{let s=a(`[data-controls=${t}]`);this.setKeyRelease(t,e.timeStamp,s),this.removeKeyFromTouchesArray(i,t)})),i=[]}),{signal:this.keypressController.signal})})),window.addEventListener("keydown",(({code:s,key:a,timeStamp:o})=>{const i=" "===a?s:a;if(!this.modal.open)return i===this.keys.pause?(t(),void this.game.music.toggleMusicPlayback()):void(this.game.isRecovering||e||this.setKeyPress(this.getButtonKeyCode(i),o))}),{signal:this.keypressController.signal}),window.addEventListener("keyup",(({code:t,key:e,timeStamp:s})=>{const a=" "===e?t:e;this.modal.open||this.setKeyRelease(this.getButtonKeyCode(a),s)}),{signal:this.keypressController.signal})}getButtonKeyCode(t){switch(t){case this.keys.left:return"left";case this.keys.up:return"up";case this.keys.right:return"right";case this.keys.down:return"down";case this.keys.action:return"action";case this.keys.jump:return"jump"}}setKeyPress(t,e,s=null){s&&s.setAttribute("data-active",""),(this.lastKey=("right"===t||"left"===t)&&e-this.timeStampOfLastDownRelease<50)&&(this.canRoll=!0),this.keysPressed[t]=!0,this.lastKey=`PRESS ${t}`}setKeyRelease(t,e,s=null){s&&s.removeAttribute("data-active"),"down"===t&&(this.timeStampOfLastDownRelease=e),this.keysPressed[t]=!1,this.lastKey=`RELEASE ${t}`}removeKeyFromTouchesArray(t,e){t=t?.filter((t=>t!=e))}removeEventListeners(){this.keypressController.abort()}populateForm(){this.controlsInputs.forEach((t=>{t.setAttribute("value",this.keys[t.id])}))}}