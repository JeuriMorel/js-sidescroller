import{BLACK_COLOR as t,DEFAULT_BAR_COLOR as h}from"./constants.js";import{DamageNumbers as i}from"./damageNumbers.js";import{getHealthBarColor as s,valuesToHSL as a}from"./utils.js";export class HealthBar{constructor({x:i,y:s,width:r,height:e,maxhealth:o,borderColor:b=t,defaultbarColor:d=h,showDamage:l=!0}){this.barOffset=2,this.x=i,this.y=s,this.width=r-2*this.barOffset,this.maxWidth=r,this.height=e,this.radius=.25*this.height,this.barRadius=Math.max(this.radius-this.barOffset,1),this.barX=this.x+this.barOffset,this.barY=this.y+this.barOffset,this.barheight=this.height-2*this.barOffset,this.health=o,this.maxhealth=o,this.borderColor=a(b),this.defaultbarColor=d,this.fillColor=d,this.damageNumbers=[],this.showDamage=l}updatePosition(t,h){this.x=t,this.y=h,this.barX=t+this.barOffset,this.barY=h+this.barOffset,this.damageNumbers=this.damageNumbers.filter((t=>!t.markedForDeletion)),this.damageNumbers.forEach((t=>t.update({x:this.x+this.width,y:this.y-this.height})))}updateBar(t){const h=this.health-t;this.health=t,this.width=this.health/this.maxhealth*this.maxWidth-2*this.barOffset,this.fillColor=s(this.defaultbarColor,this.health/this.maxhealth),this.showDamage&&this.damageNumbers.push(new i({value:h,x:this.x+this.width,y:this.y-this.height}))}draw(t){t.strokeStyle=this.borderColor,t.fillStyle=a(this.fillColor),t.lineWidth=2;const h=new Path2D;this.health>0&&(h.moveTo(this.barX+this.barRadius,this.barY),h.arcTo(this.barX+this.width,this.barY,this.barX+this.width,this.barY+this.barheight,this.barRadius),h.arcTo(this.barX+this.width,this.barY+this.barheight,this.barX,this.barY+this.barheight,this.barRadius),h.arcTo(this.barX,this.barY+this.barheight,this.barX,this.barY,this.barRadius),h.arcTo(this.barX,this.barY,this.barX+this.width,this.barY,this.barRadius),h.closePath()),t.beginPath(),t.moveTo(this.x+this.radius,this.y),t.arcTo(this.x+this.maxWidth,this.y,this.x+this.maxWidth,this.y+this.height,this.radius),t.arcTo(this.x+this.maxWidth,this.y+this.height,this.x,this.y+this.height,this.radius),t.arcTo(this.x,this.y+this.height,this.x,this.y,this.radius),t.arcTo(this.x,this.y,this.x+this.maxWidth,this.y,this.radius),t.closePath(),t.stroke(),t.fill(h),this.damageNumbers.forEach((h=>h.draw({context:t,color:this.fillColor})))}}